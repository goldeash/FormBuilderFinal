@model FormBuilder.ViewModels.TemplateViewModel

@{
    ViewData["Title"] = "Create New Template";
}

<div class="container mt-4">
    <h2>Create New Template</h2>
    <hr />

    <form id="templateForm" asp-action="Create">
        @await Html.PartialAsync("_TemplateForm", Model)

        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-primary me-md-2">Save Template</button>
            <a asp-action="Index" asp-controller="Home" class="btn btn-outline-secondary">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function() {
            // Handle question type change
            $(document).on('change', '.question-type', function() {
                const cardBody = $(this).closest('.card-body');
                const optionsContainer = cardBody.find('.options-container');
                const correctAnswerContainer = cardBody.find('.correct-answer-container');
                const haveAnswer = cardBody.find('.have-answer').is(':checked');

                if ($(this).val() === 'MultipleChoice') {
                    optionsContainer.show();
                    correctAnswerContainer.hide();
                } else {
                    optionsContainer.hide();
                    if (haveAnswer) {
                        correctAnswerContainer.show();
                    }
                }
            });

            // Handle have answer checkbox change
            $(document).on('change', '.have-answer', function() {
                const cardBody = $(this).closest('.card-body');
                const questionType = cardBody.find('.question-type').val();
                const correctAnswerContainer = cardBody.find('.correct-answer-container');
                const optionsContainer = cardBody.find('.options-container');

                if ($(this).is(':checked')) {
                    if (questionType !== 'MultipleChoice') {
                        correctAnswerContainer.show();
                    }
                    // Refresh options to show checkboxes
                    optionsContainer.find('.input-group').each(function() {
                        if (!$(this).find('.input-group-text').length) {
                            $(this).append(`
                                <div class="input-group-text">
                                    <input type="checkbox" name="${$(this).find('input').attr('name').replace('.Value', '.IsCorrect')}" class="form-check-input" />
                                </div>
                            `);
                        }
                    });
                } else {
                    correctAnswerContainer.hide();
                    // Remove all answer checkboxes
                    optionsContainer.find('.input-group-text').remove();
                }
            });

            // Add new question
            $('#addQuestionBtn').click(function() {
                const index = $('.question-card').length;
                const newQuestion = `
                    <div class="question-card card mb-3" data-index="${index}">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5>Question ${index + 1}</h5>
                            <button type="button" class="btn btn-sm btn-outline-danger remove-question">Remove</button>
                        </div>
                        <div class="card-body">
                            <input type="hidden" name="Questions[${index}].Id" value="" />

                            <div class="mb-3">
                                <label class="form-label">Question Type</label>
                                <select name="Questions[${index}].Type" class="form-select question-type">
                                    <option value="SingleLineText" selected>Single Line Text</option>
                                    <option value="MultiLineText">Multi Line Text</option>
                                    <option value="Integer">Integer</option>
                                    <option value="MultipleChoice">Multiple Choice</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Question Text</label>
                                <input name="Questions[${index}].Title" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Description (optional)</label>
                                <input name="Questions[${index}].Description" class="form-control" />
                            </div>

                            <div class="mb-3 form-check">
                                <input type="checkbox" name="Questions[${index}].IsRequired" value="true" class="form-check-input" />
                                <label class="form-check-label">Is Required</label>
                            </div>

                            <div class="mb-3 form-check">
                                <input type="checkbox" name="Questions[${index}].HaveAnswer" value="true" class="form-check-input have-answer" />
                                <label class="form-check-label">Have Answer</label>
                            </div>

                            <div class="correct-answer-container mb-3" style="display: none;">
                                <label class="form-label">Correct Answer</label>
                                <input name="Questions[${index}].CorrectAnswer" class="form-control" />
                            </div>

                            <div class="options-container" style="display: none;">
                                <label class="form-label">Options</label>
                                <div class="options-list mb-2"></div>
                                <button type="button" class="btn btn-sm btn-outline-primary add-option">Add Option</button>
                            </div>
                        </div>
                    </div>
                `;
                $('#questionsContainer').append(newQuestion);
            });

            // Remove question
            $(document).on('click', '.remove-question', function() {
                $(this).closest('.question-card').remove();
                renumberQuestions();
            });

            // Add option to question
            $(document).on('click', '.add-option', function() {
                const optionsList = $(this).siblings('.options-list');
                const questionIndex = $(this).closest('.question-card').data('index');
                const optionIndex = optionsList.children().length;
                const haveAnswer = $(this).closest('.card-body').find('.have-answer').is(':checked');

                let newOption = `
                    <div class="input-group mb-2">
                        <input name="Questions[${questionIndex}].Options[${optionIndex}].Value" class="form-control" />`;

                if (haveAnswer) {
                    newOption += `
                        <div class="input-group-text">
                            <input type="checkbox" name="Questions[${questionIndex}].Options[${optionIndex}].IsCorrect" class="form-check-input" />
                        </div>`;
                }

                newOption += `
                        <button type="button" class="btn btn-outline-danger remove-option">Remove</button>
                    </div>`;

                optionsList.append(newOption);
            });

            // Remove option
            $(document).on('click', '.remove-option', function() {
                $(this).closest('.input-group').remove();
            });

            // Toggle allowed users container
            $('#IsPublic').change(function() {
                if ($(this).is(':checked')) {
                    $('#allowedUsersContainer').hide();
                } else {
                    $('#allowedUsersContainer').show();
                }
            });

            // Add user email
            $('#addUserBtn').click(function() {
                const index = $('#allowedUsersList .input-group').length;
                const newUser = `
                    <div class="input-group mb-2">
                        <input name="AllowedUserEmails" class="form-control user-email" />
                        <button type="button" class="btn btn-outline-danger remove-user">Remove</button>
                    </div>
                `;
                $('#allowedUsersList').append(newUser);
            });

            // Remove user email
            $(document).on('click', '.remove-user', function() {
                $(this).closest('.input-group').remove();
            });

            // Add tag
            $('#addTagBtn').click(function() {
                const index = $('#tagsList .input-group').length;
                const newTag = `
                    <div class="input-group mb-2">
                        <input name="Tags" class="form-control tag-input" />
                        <button type="button" class="btn btn-outline-danger remove-tag">Remove</button>
                    </div>
                `;
                $('#tagsList').append(newTag);
            });

            // Remove tag
            $(document).on('click', '.remove-tag', function() {
                $(this).closest('.input-group').remove();
            });

            // Auto-complete for user emails
            $(document).on('focus', '.user-email', function() {
                $(this).autocomplete({
                    source: function(request, response) {
                        $.getJSON('@Url.Action("SearchUsers", "Template")', { term: request.term }, function(data) {
                            response(data);
                        });
                    },
                    minLength: 2
                });
            });

            // Auto-complete for tags
            $(document).on('focus', '.tag-input', function() {
                $(this).autocomplete({
                    source: function(request, response) {
                        $.getJSON('@Url.Action("SearchTags", "Template")', { term: request.term }, function(data) {
                            response(data);
                        });
                    },
                    minLength: 1
                });
            });

            // Renumber questions after deletion
            function renumberQuestions() {
                $('.question-card').each(function(index) {
                    $(this).data('index', index);
                    $(this).find('.card-header h5').text(`Question ${index + 1}`);

                    // Update all input names with new index
                    $(this).find('input, select').each(function() {
                        const name = $(this).attr('name');
                        if (name) {
                            const newName = name.replace(/Questions\[\d+\]/, `Questions[${index}]`);
                            $(this).attr('name', newName);
                        }
                    });
                });
            }
        });
    </script>
}